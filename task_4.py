"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""

# ----------------------------var 1---------------------------------------
data_base = {'rubik': ['password', 1],
             'bob': ['12345', 1],
             'lock': ['123asd', 0]}


def auto(login, password):
    if data_base.get(login)[1] != 1:  # O(1)
        print('необходимо выполнить активацию учетной записи')
    elif data_base.get(login)[0] != password:  # O(1)
        print('Не верный пароль')
    else:
        print('Авторизация успешна')


user_name = input('введите логин: ')
try:
    data_base.get(user_name)
    user_password = input('введите пароль: ')
    auto(user_name, user_password)
except TypeError:
    print('Такого пользователя не существует')

# O(1) нет циклов, нет сложных операций, этот вариант лучше, ибо

# ----------------------------var 2---------------------------------------

users_base = ['rubik', 'bob', 'lock']
date_base = [['password', 1], ['12345', 1], ['123asd', 0]]

def auto(login):
    password = input('введите пароль: ')
    index = users_base.index(login)
    if date_base[index][1] != 1:  # O(1)
        print('необходимо выполнить активацию учетной записи')
    elif date_base[index][0] != password:  # O(1)
        print('Не верный пароль')
    else:
        print('Авторизация успешна')


user_name = input('введите логин: ')
try:
    users_base.index(user_name)
    auto(user_name)
except ValueError:
    print('Такого пользователя не существует')

# O(1) нет циклов, нет сложных операций